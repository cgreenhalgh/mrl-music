server {
    listen       80;
    # default
    server_name  _;

    access_log  /var/log/nginx/log/http.access.log  main;

    # this is the internal Docker DNS, cache only for 30s
    resolver 127.0.0.11 valid=30s;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        #try_files $uri $uri.html $uri/ =404;
    }
    location ~ /1/link/[^.]+ {
        root   /usr/share/nginx/html;
        try_files $uri $uri.html $uri/ =404;
    #     root   /usr/share/nginx/html/1/link;
    #    index  index.html index.htm;
    #    try_files $uri $uri.html $uri/ =404;
    }
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
    location /1/archive/ {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /1/archive/index.html =404;
    }    
    location /1/archive-muzivisual/ {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /1/archive-muzivisual/index.html =404;
    }    
    # no cache data
    location /1/archive/assets/data/ {
        root /usr/share/nginx/html;
        add_header Cache-Control "must-revalidate, proxy-revalidate";
    }
    # annalist
    #location /annalist/ {
    #    set $annalist http://annalist:8000;
    #    rewrite ^(.*)$ $1 break;
    #    proxy_pass $annalist;
    #    proxy_set_header Host $http_host;
    #}
    #location /static/ {
    #    set $annalist http://annalist:8000;
    #    rewrite ^(.*)$ $1 break;
    #    proxy_pass $annalist;
    #    proxy_set_header Host $http_host;
    #}
    
    # muzivisual v1
    location /1/muzivisual/ {
        set $visual1 http://visual1:8000;
        rewrite ^/1/muzivisual(.*)$ $1 break;
        proxy_pass $visual1;
        proxy_set_header Host $http_host;
    }
    # muzivisual
    location /1/muzivisual/socket.io/ {
        set $visual1 http://visual1:8000;
        rewrite ^/1/muzivisual(.*)$ $1 break;
        proxy_pass $visual1;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    # muzivisual v2
    location /2/muzivisual/ {
        set $visual2 http://visual2:8000;
        rewrite ^/2/muzivisual(.*)$ $1 break;
        proxy_pass $visual2;
        proxy_set_header Host $http_host;
    }
    # muzivisual socket.io - should really use client option path to get it to look under /1/muzivisual
    # muzivisual
    location /socket.io/ {
        set $visual2 http://visual2:8000;
        rewrite ^(.*)$ $1 break;
        proxy_pass $visual2;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # logproc
    location /1/logproc/ {
        set $logproc http://logproc:8000;
        rewrite ^/1/logproc(.*)$ $1 break;
        proxy_pass $logproc;
        proxy_set_header Host $http_host;
    }
    
    # audience-app - redirect to https, including ?p= parameter
    location /2/losing-her-voice/ {
    	# non-standard port for dev?! 
    	#return 301 https://$host:8443$request_uri;
		return 301 https://$host$request_uri;
    }
    # audience-server - https only
    # audience-server socket.io - https only

    # music-class-chat
    location /3/music-class-chat/ {
        set $mcc_server http://music-class-chat:3000;
        rewrite ^(/.*)$ $1 break;
        proxy_pass $mcc_server;
        proxy_set_header Host $http_host;
    }

}
